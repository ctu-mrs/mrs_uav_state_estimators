<launch>

  <!-- args corresponding to environment variables -->
  <arg name="UAV_NAME" default="$(env UAV_NAME)" />
  <arg name="PROFILER" default="$(optenv PROFILER false)" />
  <arg name="WORLD_FILE" default="$(optenv WORLD_FILE)" />
  <arg name="WORLD_NAME" default="$(optenv WORLD_NAME)" />
  <arg name="RUN_TYPE" default="$(optenv RUN_TYPE)" />

  <arg if="$(eval arg('RUN_TYPE') == 'simulation')" name="simulation" value="true" />
  <arg unless="$(eval arg('RUN_TYPE') == 'simulation')" name="simulation" value="false" />

  <arg if="$(eval arg('WORLD_FILE') == '' and arg('WORLD_NAME') != '')" name="world_file" value="$(find mrs_uav_general)/config/worlds/world_$(env WORLD_NAME).yaml" />
  <arg if="$(eval arg('WORLD_FILE') == '' and arg('WORLD_NAME') == '' and arg('simulation'))" name="world_file" value="$(find mrs_uav_general)/config/worlds/world_simulation.yaml" />
  <arg if="$(eval arg('WORLD_FILE') != '')" name="world_file" value="$(arg WORLD_FILE)" />

    <!-- other args -->
  <arg name="standalone" default="true" />
  <arg name="debug" default="false" />

  <arg name="fcu_frame_id" default="fcu" />
  <arg name="fcu_untilted_frame_id" default="fcu_untilted" />

  <arg     if="$(eval arg('standalone') or arg('debug'))" name="nodelet" value="standalone" />
  <arg unless="$(eval arg('standalone') or arg('debug'))" name="nodelet" value="load" />
  <arg     if="$(eval arg('standalone') or arg('debug'))" name="nodelet_manager" value="" />
  <arg unless="$(eval arg('standalone') or arg('debug'))" name="nodelet_manager" value="$(arg UAV_NAME)_nodelet_manager" />

  <arg     if="$(arg debug)" name="launch_prefix" value="debug_roslaunch" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />

  <group ns="$(arg UAV_NAME)">

<!--//{ estimation_manager -->
    <node pkg="nodelet" type="nodelet" name="estimation_manager" args="$(arg nodelet) mrs_uav_state_estimation/EstimationManager $(arg nodelet_manager)" output="screen" launch-prefix="$(arg launch_prefix)">

      <param name="enable_profiler" value="$(arg PROFILER)" />
      <param name="uav_name" value="$(arg UAV_NAME)" />
      <param name="fcu_frame_id" value="fcu" />

      <rosparam file="$(arg world_file)" command="load" />
      <rosparam file="$(find mrs_uav_state_estimation)/config/estimation_manager.yaml" command="load" />
      <rosparam file="$(find mrs_uav_state_estimation)/config/estimators.yaml" command="load" />

<!--//{ Subscribers-->
      <!-- common -->
      <remap from="~attitude_command_in" to="control_manager/attitude_cmd" />
      <remap from="~mavros_odom_in" to="mavros/local_position/odom" />

<!--//}-->

<!--//{ Publishers -->
      <remap from="~profiler" to="profiler" />
      <remap from="~odom_main_out" to="~odom_main" />
      <remap from="~uav_state_out" to="~uav_state" />
      <remap from="~diagnostics_out" to="~diagnostics" />
      <remap from="~max_flight_altitude_agl_out" to="~max_flight_altitude_agl" />
      <remap from="~altitude_agl_out" to="~altitude_agl" />

<!--//{ FIXME: delete after merge with new uav system -->
      <remap from="~diagnostics_legacy_out" to="~diagnostics_legacy" />
<!--//}-->
<!--//}-->

<!--//{ Service servers -->
      <remap from="~change_estimator_in" to="~change_estimator" />
      <remap from="~toggle_service_callbacks_in" to="~toggle_service_callbacks" />
<!--//}-->

    </node>
<!--//}-->

<!--//{ transform_manager -->
    <node pkg="nodelet" type="nodelet" name="transform_manager" args="$(arg nodelet) mrs_uav_state_estimation/TransformManager $(arg nodelet_manager)" output="screen" launch-prefix="$(arg launch_prefix)">

      <param name="enable_profiler" value="$(arg PROFILER)" />
      <param name="uav_name" value="$(arg UAV_NAME)" />
      <param name="frame_id/fcu" value="$(arg fcu_frame_id)" />
      <param name="frame_id/fcu_untilted" value="$(arg fcu_untilted_frame_id)" />

      <rosparam file="$(arg world_file)" command="load" />
      <rosparam file="$(find mrs_uav_state_estimation)/config/transform_manager.yaml" command="load" />

      <!-- Subscribers -->
      <remap from="~uav_state_in" to="estimation_manager/uav_state" />
      <remap from="~mavros_odom_in" to="mavros/local_position/odom" />
      <remap from="~mavros_utm_in" to="mavros/global_position/global" />

      <!-- Publishers -->
      <remap from="~profiler" to="profiler" />

    </node>
<!--//}-->

    <!-- RTK antenna to FCU TF (TODO: move to sensors.launch) -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="fcu_to_rtk_antenna" args="0.0 0.0 0.20 0 0 0 $(arg UAV_NAME)/$(arg fcu_frame_id) $(arg UAV_NAME)/rtk_antenna" />

  </group>

</launch>
